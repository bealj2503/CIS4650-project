
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import absyn.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\010\003\000\002\010" +
    "\006\000\002\025\005\000\002\025\003\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\026\003\000" +
    "\002\026\002\000\002\011\006\000\002\015\005\000\002" +
    "\015\004\000\002\015\005\000\002\015\006\000\002\015" +
    "\006\000\002\015\004\000\002\021\004\000\002\021\003" +
    "\000\002\021\004\000\002\002\004\000\002\002\002\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\022\007\000\002\022" +
    "\007\000\002\022\007\000\002\022\005\000\002\023\007" +
    "\000\002\023\011\000\002\023\011\000\002\023\011\000" +
    "\002\023\007\000\002\023\007\000\002\023\007\000\002" +
    "\023\005\000\002\024\005\000\002\024\010\000\002\024" +
    "\005\000\002\024\005\000\002\027\003\000\002\027\003" +
    "\000\002\003\004\000\002\003\002\000\002\013\006\000" +
    "\002\020\003\000\002\020\003\000\002\031\004\000\002" +
    "\031\003\000\002\016\004\000\002\016\006\000\002\016" +
    "\004\000\002\033\005\000\002\033\004\000\002\033\003" +
    "\000\002\032\003\000\002\032\003\000\002\017\010\000" +
    "\002\017\010\000\002\017\010\000\002\030\003\000\002" +
    "\004\005\000\002\004\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\003\000\002\006\005\000" +
    "\002\006\005\000\002\006\003\000\002\007\005\000\002" +
    "\007\003\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\010\003\013\035\004\036\006\001\002\000" +
    "\006\003\uffd6\033\uffd6\001\002\000\012\002\uffce\003\uffce" +
    "\035\uffce\036\uffce\001\002\000\006\003\uffd5\033\uffd5\001" +
    "\002\000\004\002\222\001\002\000\012\002\uffc2\003\013" +
    "\035\004\036\006\001\002\000\012\002\uffd0\003\uffd0\035" +
    "\uffd0\036\uffd0\001\002\000\006\003\020\033\017\001\002" +
    "\000\004\033\015\001\002\000\012\002\uffd1\003\uffd1\035" +
    "\uffd1\036\uffd1\001\002\000\004\023\016\001\002\000\034" +
    "\002\uffd8\003\uffd8\005\uffd8\006\uffd8\007\uffd8\023\uffd8\025" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\001\002\000\010\023\023\025\024\027\022\001\002\000" +
    "\004\023\021\001\002\000\034\002\uffd7\003\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\023\uffd7\025\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\001\002\000\004\034\216" +
    "\001\002\000\034\002\uffda\003\uffda\005\uffda\006\uffda\007" +
    "\uffda\023\uffda\025\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\001\002\000\010\003\026\035\004\036" +
    "\031\001\002\000\014\003\213\024\212\026\uffc7\035\004" +
    "\036\006\001\002\000\006\026\210\033\207\001\002\000" +
    "\004\026\036\001\002\000\004\033\033\001\002\000\006" +
    "\026\uffc6\033\uffd5\001\002\000\014\003\uffc8\024\uffc8\026" +
    "\uffc8\035\uffc8\036\uffc8\001\002\000\016\003\uffcd\024\uffcd" +
    "\026\uffcd\027\034\035\uffcd\036\uffcd\001\002\000\004\030" +
    "\035\001\002\000\014\003\uffcc\024\uffcc\026\uffcc\035\uffcc" +
    "\036\uffcc\001\002\000\006\003\040\031\037\001\002\000" +
    "\032\003\uffd3\005\uffd3\006\uffd3\007\uffd3\023\uffd3\025\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\001" +
    "\002\000\012\002\uffc4\003\uffc4\035\uffc4\036\uffc4\001\002" +
    "\000\012\002\uffc5\003\uffc5\035\uffc5\036\uffc5\001\002\000" +
    "\032\003\013\005\uffec\006\uffec\007\uffec\023\uffec\025\uffec" +
    "\031\uffec\032\uffec\033\uffec\034\uffec\035\004\036\006\001" +
    "\002\000\024\005\055\006\053\007\052\023\051\025\056" +
    "\031\037\032\050\033\057\034\060\001\002\000\032\003" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\023\uffd4\025\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\001\002\000" +
    "\006\003\020\033\046\001\002\000\006\023\023\027\022" +
    "\001\002\000\024\005\uffed\006\uffed\007\uffed\023\uffed\025" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\001\002\000\036" +
    "\002\uffd2\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\023" +
    "\uffd2\025\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\001\002\000\026\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\023\uffef\025\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\001\002\000\006\003\174\025\175\001\002\000\014\003" +
    "\166\023\164\025\056\033\057\034\060\001\002\000\026" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\023\uffea\025\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\001\002\000\006\003\141" +
    "\025\142\001\002\000\010\025\056\033\057\034\060\001" +
    "\002\000\046\003\000\010\000\011\000\012\000\013\000" +
    "\014\000\015\000\016\000\017\000\020\000\021\000\022" +
    "\000\023\000\024\000\025\126\026\000\027\125\030\000" +
    "\001\002\000\040\003\uffb4\010\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\026\uffb4\030\uffb4\001\002\000\026\004" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\023\uffe7\025\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\001\002\000\006\003\123\023" +
    "\124\001\002\000\040\003\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\026\uffb6\030\uffb6\001\002\000\034" +
    "\003\uffb9\010\110\011\111\014\103\015\106\016\105\017" +
    "\104\021\107\022\112\023\uffb9\024\uffb9\026\uffb9\030\uffb9" +
    "\001\002\000\040\003\ufffa\010\ufffa\011\ufffa\012\077\013" +
    "\076\014\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\026\ufffa\030\ufffa\001\002\000\014\003" +
    "\uffc0\023\uffc0\024\uffc0\026\uffc0\030\uffc0\001\002\000\026" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\023\uffeb\025\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\001\002\000\026\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\023\uffe9\025\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\001\002\000\026\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\023\uffe8\025\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\001\002\000\040\003\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\026\uffb2\030\uffb2\001\002" +
    "\000\042\003\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\020\074\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\026\uffb3\030\uffb3\001\002\000\010\025" +
    "\056\033\057\034\060\001\002\000\014\003\uffc1\023\uffc1" +
    "\024\uffc1\026\uffc1\030\uffc1\001\002\000\010\025\056\033" +
    "\057\034\060\001\002\000\010\025\056\033\057\034\060" +
    "\001\002\000\040\003\uffb3\010\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\026\uffb3\030\uffb3\001\002\000\040\003" +
    "\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\026" +
    "\uffb8\030\uffb8\001\002\000\040\003\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\026\uffb7\030\uffb7\001\002" +
    "\000\010\025\056\033\057\034\060\001\002\000\010\025" +
    "\056\033\057\034\060\001\002\000\010\025\056\033\057" +
    "\034\060\001\002\000\010\025\056\033\057\034\060\001" +
    "\002\000\010\025\056\033\057\034\060\001\002\000\010" +
    "\025\056\033\057\034\060\001\002\000\010\025\056\033" +
    "\057\034\060\001\002\000\010\025\056\033\057\034\060" +
    "\001\002\000\020\003\uffbb\010\110\011\111\023\uffbb\024" +
    "\uffbb\026\uffbb\030\uffbb\001\002\000\040\003\ufffb\010\ufffb" +
    "\011\ufffb\012\077\013\076\014\ufffb\015\ufffb\016\ufffb\017" +
    "\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\026\ufffb\030\ufffb" +
    "\001\002\000\040\003\ufffc\010\ufffc\011\ufffc\012\077\013" +
    "\076\014\ufffc\015\ufffc\016\ufffc\017\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\026\ufffc\030\ufffc\001\002\000\020\003" +
    "\uffba\010\110\011\111\023\uffba\024\uffba\026\uffba\030\uffba" +
    "\001\002\000\020\003\uffbc\010\110\011\111\023\uffbc\024" +
    "\uffbc\026\uffbc\030\uffbc\001\002\000\020\003\uffbe\010\110" +
    "\011\111\023\uffbe\024\uffbe\026\uffbe\030\uffbe\001\002\000" +
    "\020\003\uffbd\010\110\011\111\023\uffbd\024\uffbd\026\uffbd" +
    "\030\uffbd\001\002\000\020\003\uffbf\010\110\011\111\023" +
    "\uffbf\024\uffbf\026\uffbf\030\uffbf\001\002\000\026\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\023\uffee\025\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\001\002\000\026\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\023\ufff0\025\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\001\002\000\010\025\056\033\057\034\060" +
    "\001\002\000\012\025\056\026\ufff8\033\057\034\060\001" +
    "\002\000\006\024\133\026\ufff9\001\002\000\004\026\132" +
    "\001\002\000\006\024\ufffd\026\ufffd\001\002\000\040\003" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\026" +
    "\ufff7\030\ufff7\001\002\000\010\025\056\033\057\034\060" +
    "\001\002\000\006\024\ufffe\026\ufffe\001\002\000\004\030" +
    "\136\001\002\000\042\003\uffff\010\uffff\011\uffff\012\uffff" +
    "\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021" +
    "\uffff\022\uffff\023\uffff\024\uffff\026\uffff\030\uffff\001\002" +
    "\000\004\026\140\001\002\000\040\003\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\026\uffb5\030\uffb5\001" +
    "\002\000\022\005\055\006\053\007\052\023\051\025\056" +
    "\031\037\033\057\034\060\001\002\000\010\025\056\033" +
    "\057\034\060\001\002\000\006\003\145\026\144\001\002" +
    "\000\022\005\055\006\053\007\052\023\051\025\056\031" +
    "\037\033\057\034\060\001\002\000\022\005\055\006\053" +
    "\007\052\023\051\025\056\031\037\033\057\034\060\001" +
    "\002\000\026\004\147\005\uffdc\006\uffdc\007\uffdc\023\uffdc" +
    "\025\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\001\002\000" +
    "\022\005\055\006\053\007\052\023\051\025\056\031\037" +
    "\033\057\034\060\001\002\000\026\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\023\uffdf\025\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\001\002\000\026\004\152\005\uffe2\006\uffe2\007" +
    "\uffe2\023\uffe2\025\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\001\002\000\022\005\055\006\053\007\052\023\051\025" +
    "\056\031\037\033\057\034\060\001\002\000\026\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\023\uffe1\025\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\001\002\000\026\004\162\005\uffdb" +
    "\006\uffdb\007\uffdb\023\uffdb\025\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\001\002\000\010\003\123\023\124\026\156" +
    "\001\002\000\022\005\055\006\053\007\052\023\051\025" +
    "\056\031\037\033\057\034\060\001\002\000\026\004\160" +
    "\005\uffdd\006\uffdd\007\uffdd\023\uffdd\025\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\001\002\000\022\005\055\006\053" +
    "\007\052\023\051\025\056\031\037\033\057\034\060\001" +
    "\002\000\026\004\uffe0\005\uffe0\006\uffe0\007\uffe0\023\uffe0" +
    "\025\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\001\002\000" +
    "\022\005\055\006\053\007\052\023\051\025\056\031\037" +
    "\033\057\034\060\001\002\000\026\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\023\uffde\025\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\001\002\000\026\004\ufff5\005\ufff5\006\ufff5\007" +
    "\ufff5\023\ufff5\025\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5" +
    "\001\002\000\006\003\170\023\171\001\002\000\026\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\023\167\025\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\001\002\000\026\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\023\ufff4\025\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\034\ufff4\001\002\000\004\023\173\001\002\000" +
    "\030\003\172\004\ufff6\005\ufff6\006\ufff6\007\ufff6\023\ufff6" +
    "\025\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\001\002\000" +
    "\026\004\ufff2\005\ufff2\006\ufff2\007\ufff2\023\ufff2\025\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\001\002\000\026\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\023\ufff3\025\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\001\002\000\022\005\055\006" +
    "\053\007\052\023\051\025\056\031\037\033\057\034\060" +
    "\001\002\000\010\025\056\033\057\034\060\001\002\000" +
    "\006\003\200\026\177\001\002\000\022\005\055\006\053" +
    "\007\052\023\051\025\056\031\037\033\057\034\060\001" +
    "\002\000\022\005\055\006\053\007\052\023\051\025\056" +
    "\031\037\033\057\034\060\001\002\000\026\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\023\uffe4\025\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\001\002\000\026\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\023\uffe6\025\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\001\002\000\026\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\023\uffe3\025\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\001\002\000\010\003\123\023\124\026\205\001\002\000" +
    "\022\005\055\006\053\007\052\023\051\025\056\031\037" +
    "\033\057\034\060\001\002\000\026\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\023\uffe5\025\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\001\002\000\014\003\uffcb\024\uffcb\026\uffcb\035" +
    "\uffcb\036\uffcb\001\002\000\004\031\037\001\002\000\012" +
    "\002\uffc3\003\uffc3\035\uffc3\036\uffc3\001\002\000\010\003" +
    "\213\035\004\036\006\001\002\000\004\033\207\001\002" +
    "\000\014\003\uffc9\024\uffc9\026\uffc9\035\uffc9\036\uffc9\001" +
    "\002\000\014\003\uffca\024\uffca\026\uffca\035\uffca\036\uffca" +
    "\001\002\000\004\030\217\001\002\000\004\023\220\001" +
    "\002\000\034\002\uffd9\003\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\023\uffd9\025\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\001\002\000\012\002\uffcf\003\uffcf\035\uffcf" +
    "\036\uffcf\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\016\017\010\020\004\024\013\027\011\030" +
    "\006\031\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\010\020" +
    "\220\024\013\027\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\031\027\027\032\026\033\024\001\001\000\006" +
    "\016\213\027\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\040\001\001\000\004\003\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\042\024\043\027" +
    "\044\001\001\000\034\004\061\005\065\006\064\007\062" +
    "\010\072\011\071\012\063\013\053\014\046\015\060\021" +
    "\066\022\070\023\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\164" +
    "\005\065\006\064\007\062\010\072\011\071\012\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\136" +
    "\005\065\006\064\007\062\010\072\011\071\012\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\074\005\065\006\064\007\062\010\072" +
    "\011\071\012\063\001\001\000\002\001\001\000\010\007" +
    "\101\010\077\011\071\001\001\000\010\007\100\010\077" +
    "\011\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\064\007\062\010\077\011\071" +
    "\012\121\001\001\000\014\006\064\007\062\010\077\011" +
    "\071\012\120\001\001\000\014\006\064\007\062\010\077" +
    "\011\071\012\117\001\001\000\014\006\064\007\062\010" +
    "\077\011\071\012\116\001\001\000\014\006\064\007\062" +
    "\010\077\011\071\012\115\001\001\000\012\006\114\007" +
    "\062\010\077\011\071\001\001\000\012\006\113\007\062" +
    "\010\077\011\071\001\001\000\014\006\064\007\062\010" +
    "\077\011\071\012\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\134\005" +
    "\065\006\064\007\062\010\072\011\071\012\063\001\001" +
    "\000\024\004\130\005\065\006\064\007\062\010\072\011" +
    "\071\012\063\025\126\026\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\133\005\065\006\064\007\062\010\072\011\071" +
    "\012\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\154\005\065\006\064\007\062\010\072\011\071\012" +
    "\063\013\053\014\153\015\060\021\066\022\070\023\067" +
    "\001\001\000\020\004\142\005\065\006\064\007\062\010" +
    "\072\011\071\012\063\001\001\000\002\001\001\000\034" +
    "\004\061\005\065\006\064\007\062\010\072\011\071\012" +
    "\063\013\053\014\150\015\060\021\066\022\070\023\067" +
    "\001\001\000\034\004\061\005\065\006\064\007\062\010" +
    "\072\011\071\012\063\013\053\014\145\015\060\021\066" +
    "\022\070\023\067\001\001\000\002\001\001\000\034\004" +
    "\061\005\065\006\064\007\062\010\072\011\071\012\063" +
    "\013\053\014\147\015\060\021\066\022\070\023\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\061" +
    "\005\065\006\064\007\062\010\072\011\071\012\063\013" +
    "\053\014\152\015\060\021\066\022\070\023\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\061\005\065\006\064\007\062\010\072\011\071" +
    "\012\063\013\053\014\156\015\060\021\066\022\070\023" +
    "\067\001\001\000\002\001\001\000\034\004\061\005\065" +
    "\006\064\007\062\010\072\011\071\012\063\013\053\014" +
    "\160\015\060\021\066\022\070\023\067\001\001\000\002" +
    "\001\001\000\034\004\061\005\065\006\064\007\062\010" +
    "\072\011\071\012\063\013\053\014\162\015\060\021\066" +
    "\022\070\023\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\203\005\065\006\064\007\062" +
    "\010\072\011\071\012\063\013\053\014\202\015\060\021" +
    "\066\022\070\023\067\001\001\000\020\004\175\005\065" +
    "\006\064\007\062\010\072\011\071\012\063\001\001\000" +
    "\002\001\001\000\034\004\061\005\065\006\064\007\062" +
    "\010\072\011\071\012\063\013\053\014\201\015\060\021" +
    "\066\022\070\023\067\001\001\000\034\004\061\005\065" +
    "\006\064\007\062\010\072\011\071\012\063\013\053\014" +
    "\200\015\060\021\066\022\070\023\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\061\005\065\006\064\007\062\010\072" +
    "\011\071\012\063\013\053\014\205\015\060\021\066\022" +
    "\070\023\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\210\001\001\000\002\001\001\000\006\016" +
    "\214\027\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
   public void report_error2(String message, int row, int col) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            System.out.println(col + " " + row);
        
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList start_val = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // var ::= ID 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new VarArrExp(ileft,iright,new VarExp(ileft,iright,i),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // var ::= ID LSQUARE expression RSQUARE 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarArrExp(ileft,iright,new VarExp(ileft,iright,i),e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // arg_list ::= arg_list COMMA expression 
            {
              ArgList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgList al = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArgList t = al;
                while( t.tail != null )
                  t = t.tail;
                t.tail = new ArgList(e, null);
                RESULT = al;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // arg_list ::= expression 
            {
              ArgList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArgList(e,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // additive_expression ::= additive_expression PLUS term 
            {
              Exp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp ae = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(aeleft, aeright, ae, OpExp.PLUS, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // additive_expression ::= additive_expression MINUS term 
            {
              Exp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp ae = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(aeleft, aeright, ae, OpExp.MINUS, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // additive_expression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // args ::= arg_list 
            {
              ArgList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgList al = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = al;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // args ::= 
            {
              ArgList RESULT =null;
		RESULT = new ArgList(null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // call ::= ID LPAREN args RPAREN 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgList a = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CallExp(ileft,iright,new VarExp(ileft,iright,i), a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // return_stmt ::= RETURN expression SEMI 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReturnExp(rleft,rright,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // return_stmt ::= RETURN SEMI 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReturnExp(rleft,rright,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // return_stmt ::= RETURN error SEMI 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                parser.report_error("Invalid return expression",null);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // return_stmt ::= RETURN expression error SEMI 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Invalid syntax before ;",null);
                   RESULT = new ReturnExp(rleft,rright,ex);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // return_stmt ::= RETURN expression SEMI error 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                  parser.report_error("Invalid syntax after ;", null);
                  RESULT = new ReturnExp(rleft,rright,ex);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // return_stmt ::= RETURN error 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Missing semicolon on return", null);
                  RESULT = new ReturnExp(rleft,rright,null);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression_stmt ::= expression SEMI 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ExpStmt(eleft,eright,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression_stmt ::= SEMI 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpStmt(sleft,sright,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression_stmt ::= expression error 
            {
              Exp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid expression", e);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement_list ::= statement_list statement 
            {
              ExpList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList sl = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpList t = sl;
                    if(t.head == null && t.tail == null){
                      sl = new ExpList(s,null);
                      RESULT = sl;
                    }
                    while( t.tail != null )
                      t = t.tail;
                    t.tail = new ExpList(s, null);
                    RESULT = sl;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= 
            {
              ExpList RESULT =null;
		RESULT = new ExpList(null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= expression_stmt 
            {
              Exp RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp es = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = es;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= compound_stmt 
            {
              Exp RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp cs = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= selection_stmt 
            {
              Exp RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp ss = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ss;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= iteration_stmt 
            {
              Exp RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp is = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = is;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= return_stmt 
            {
              Exp RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp rs = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // iteration_stmt ::= WHILE LPAREN expression RPAREN statement 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new RepeatExp(wleft, wright, new ExpList(s,null), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // iteration_stmt ::= WHILE error expression RPAREN statement 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Left parenthesis missing", null);
                       RESULT  = new RepeatExp(wleft, wright, new ExpList(s,null), ex);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // iteration_stmt ::= WHILE LPAREN expression error statement 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Right parenthesis missing", null);
                       RESULT  = new RepeatExp(wleft, wright, new ExpList(s,null), ex);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // iteration_stmt ::= WHILE error statement 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("While expression invalid", null);
                       RESULT  = new RepeatExp(wleft, wright, new ExpList(s,null), null);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // selection_stmt ::= IF LPAREN expression RPAREN statement 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(ileft, iright, e, new ExpList(s,null), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // selection_stmt ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(ileft, iright, e, new ExpList(s1,null), new ExpList(s2,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // selection_stmt ::= IF error expression RPAREN statement ELSE statement 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Left parenthesis missing", null); 
                       RESULT = new IfExp(ileft, iright, ex, new ExpList(s,null), new ExpList(s2,null));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // selection_stmt ::= IF LPAREN expression error statement ELSE statement 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Right parenthesis missing", null); 
                       RESULT = new IfExp(ileft, iright, ex, new ExpList(s,null), new ExpList(s2,null));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // selection_stmt ::= IF error statement ELSE statement 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Condition statement is invalid", null); 
                       RESULT = new IfExp(ileft, iright, null, new ExpList(s,null), new ExpList(s2,null));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // selection_stmt ::= IF error expression RPAREN statement 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Left parenthesis missing", null); 
                       RESULT = new IfExp(ileft, iright, ex, new ExpList(s,null), null);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // selection_stmt ::= IF LPAREN expression error statement 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Right parenthesis missing", null); 
                       RESULT = new IfExp(ileft, iright, ex, new ExpList(s,null), null);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // selection_stmt ::= IF error statement 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Condition statement is invalid", null); 
                       RESULT = new IfExp(ileft, iright, null, new ExpList(s,null), null);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_declaration ::= type_specifier ID SEMI 
            {
              Exp RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDecExp(tsleft,tsright,ts,new VarExp(ileft,iright,i), null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_declaration ::= type_specifier ID LSQUARE NUM RSQUARE SEMI 
            {
              Exp RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new VarDecExp(tsleft,tsright,ts,new VarExp(ileft,iright,i),new IntExp(nleft,nright,n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_declaration ::= error ID SEMI 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Invalid type declaration", null);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_declaration ::= type_specifier error SEMI 
            {
              Exp RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("Invalid variable declaration", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_specifier ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type_specifier ::= VOID 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // local_declarations ::= local_declarations var_declaration 
            {
              ExpList RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList ld = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp vd = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      ExpList t = ld;
                       if(t.head == null && t.tail == null)
                       {
                         ld = new ExpList(vd,null);
                         RESULT = ld;
                       }
                       else{
                         while( t.tail != null )
                          t = t.tail;
                         t.tail = new ExpList(vd, null);
                       
                        RESULT = ld;
                       }
                       
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // local_declarations ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // compound_stmt ::= LBRACE local_declarations statement_list RBRACE 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpList ld = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList sl = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CompoundStmt(lleft,lright,ld,sl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaration ::= var_declaration 
            {
              Exp RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp vd = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = vd;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaration ::= fun_declaration 
            {
              Exp RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp fd = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = fd;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaration_list ::= declaration_list declaration 
            {
              DecList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      DecList t = dl;
                      while( t.tail != null )
                        t = t.tail;
                      t.tail = new DecList(d, null);
                      RESULT = dl;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaration_list ::= declaration 
            {
              DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DecList(d,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // param ::= type_specifier ID 
            {
              Exp RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Param(tsright,tsleft,ts,new VarExp(ileft,iright,i),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // param ::= type_specifier ID LSQUARE RSQUARE 
            {
              Exp RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Param(tsright,tsleft,ts,new VarExp(ileft,iright,i),true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // param ::= error ID 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.report_error("Invalid type", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // param_list ::= param_list COMMA param 
            {
              ParamList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList pl = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        ParamList t = pl;
                        while( t.tail != null )
                          t = t.tail;
                        t.tail = new ParamList(p, null);
                        RESULT = pl;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // param_list ::= param_list param 
            {
              ParamList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamList pl = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.report_fatal_error("Params must be seperated by ,",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // param_list ::= param 
            {
              ParamList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParamList(p,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // params ::= param_list 
            {
              ParamList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamList pl = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = pl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // params ::= VOID 
            {
              ParamList RESULT =null;
		RESULT = new ParamList(null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fun_declaration ::= type_specifier ID LPAREN params RPAREN compound_stmt 
            {
              Exp RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList ps = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp cs = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FuncDec(tsleft, tsright, ts,new VarExp(ileft,iright,i),ps,cs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // fun_declaration ::= type_specifier ID LPAREN params RPAREN error 
            {
              Exp RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList ps = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_fatal_error("Missing a close or open brace",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // fun_declaration ::= type_specifier ID LPAREN error RPAREN compound_stmt 
            {
              Exp RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp cs = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.report_error("Must have void for empty parameters",null);
                      RESULT = new FuncDec(tsleft, tsright, ts,new VarExp(ileft,iright,i),null,cs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // program ::= declaration_list 
            {
              DecList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = dl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= var EQ expression 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignExp(vleft,vright,v,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= simple_expression 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simple_expression ::= additive_expression LT additive_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(eleft, eright, e, OpExp.LT, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simple_expression ::= additive_expression GT additive_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(eleft, eright,e, OpExp.GT, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simple_expression ::= additive_expression GTE additive_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(eleft, eright,e, OpExp.GTE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // simple_expression ::= additive_expression LTE additive_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(eleft, eright,e, OpExp.LTE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // simple_expression ::= additive_expression NEQ additive_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(eleft, eright,e, OpExp.NEQ, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // simple_expression ::= additive_expression EQE additive_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(eleft, eright,e, OpExp.EQE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simple_expression ::= additive_expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // term ::= term TIMES factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(tleft, tright, t, OpExp.TIMES, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // term ::= term OVER factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(tleft, tright, t, OpExp.OVER, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= NUM 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntExp(nleft, nright, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= var 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= call 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
